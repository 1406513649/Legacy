#!/usr/bin/env python
import os
import re
import sys
from subprocess import check_output, Popen
from argparse import ArgumentParser

class Devices:
    def __init__(self):
        self.devices = {}
    def __contains__(self, name):
        return name in self.devices
    def __getitem__(self, key):
        return self.devices[key]
    def set(self, cache):
        if not re.search(r'[0-9#]:', cache[-1]):
            return
        if re.search(r'Apple_Boot', cache[-1]):
            return
        last = cache[-1].split()
        assert last[1] == 'Apple_HFS'
        device = '/dev/{0}'.format(last[-1])
        self.devices[last[2]] = device
    @property
    def names(self):
        return ', '.join(self.devices.keys())

def main():
    p = ArgumentParser()
    p.add_argument('-l', action='store_true', help='List')
    p.add_argument('device', nargs='?', default='Untitled', help='Device')
    args = p.parse_args()

    devices = Devices()
    command = 'diskutil list'.split()
    out = [' '.join(s.split()) for s in check_output(command).decode().split('\n')]
    cache = [out[0]]
    for line in out[1:]:
        if not line.split():
            continue
        if line.startswith('/dev/'):
            devices.set(cache)
            cache = []
        cache.append(line)
    if cache:
        devices.set(cache)

    if args.l:
        print(devices.names)
        sys.exit()

    if args.device not in devices:
        sys.exit('Device {0} not found'.format(args.device))

    command = 'diskutil unmount {0}'.format(devices[args.device]).split()
    proc = Popen(command)
    proc.wait()
    sys.exit(proc.returncode)

main()
